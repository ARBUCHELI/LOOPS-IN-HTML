# LOOPS IN HTML
---------------

* Why Use Shorthand?
--------------------
Using the traditional loop syntax in PHP with brackets ({}) to open and close code blocks can be used when embedding PHP code in HTML:

<ul>
<?php
for ($i = 0; $i < 2; $i++) {
?>
<li>Duck</li>
<?php
}
?>
<li>Goose</li>
</ul>

However, when adding nested loops, the readability of the code can suffer. To determine where loops end, we have to count and match brackets.

Luckily, PHP offers an alternate syntax which is especially useful when working with HTML. Instead of using an opening bracket ({), we use a colon (:) and instead of using a closing 
bracket (}), we use a closing keyword and semicolon (;). For the for loop, the closing keyword is endfor. Our duck, duck, goose example becomes:

<ul>
<?php
for ($i = 0; $i < 2; $i++):
?>
<li>Duck</li>
<?php
endfor;
?>
<li>Goose</li>
</ul>

Now, when reading this code, it becomes immediately apparent that the endfor keyword is closing the for loop.

index.php
---------
<h1>Only Shoes Shoe Shop</h1>
<?php
for ($i = 0; $i < 5; $i++) :
?>
<p>We sell shoes</p>
<?php
endfor;
?>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Loop Shorthand
----------------
Weâ€™ve already covered the shorthand for for loops in PHP. The versions for while and foreach loops are very similar.

The only difference is the closing keywords. For a while loop, the closing keyword is endwhile, and for the foreach loop, the closing keyword is endforeach.

Our duck, duck, goose example for the while loop becomes:

<ul>
<?php
$i = 0;
while ($i < 2):
?>
<li>Duck</li>
<?php
$i++;
endwhile;
?>
<li>Goose</li>
</ul>

And the same example using foreach becomes:

<ul>
<?php
$array = [0, 1];
foreach ($array as $i):
?>
<li>Duck</li>
<?php
endforeach;
?>
<li>Goose</li>
</ul>

index.php
---------
<h1>Only Shoes Shoe Shop</h1>
<?php
$i = 0;
$repeats = [0, 1];
while ($i < 5) :
?>
<p>We sell shoes</p>
  <?php
  foreach ($repeats as $value) :
  ?>
  <p>(only shoes)</p>
  <?php
  endforeach;
  ?>
<?php
  $i++;
endwhile;
?>

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Review
With the PHP shorthand you have just learned, you can now create more readable HTML files with embedded PHP loops.

Here are the key ideas from this lesson:

	. The PHP shorthand for loops uses a colon (:) instead of a bracket ({) to open the code block.

	. The shorthand uses keywords to close the code block instead of a bracket (}):

	. Use endfor to close a for loop

	. Use endforeach to close a foreach loop

	. Use endwhile to close a while loop

	. The closing keyword needs to be followed by a semicolon (;).

	. Make sure to re-enter PHP mode using <?php or the echo shorthand <?= before using PHP variables in the loop

index.php
---------
<h1>Shoe Shop</h1>
<?php
$footwear = [
  "sandals" => 4,
  "sneakers" => 7,
	"boots" => 3
];
?>
<p>Our footwear:</p>
<h3>foreach</h1>
<?php
foreach ($footwear as $type => $brands):
?>
<p>We sell <?=$brands?> brands of <?=$type?></p>
<?php
endforeach;
?>
<h3>for</h1>
<?php
$types = [
  "sandals",
  "sneakers",
	"boots"
];
$quantities = [
  4,
  7,
	3
];
for ($i=0; $i<count($types); $i++):
?>
<p>We sell <?=$quantities[$i]?> brands of <?=$types[$i]?></p>
<?php
endfor;
?>
<h3>while</h1>
<?php
$types = [
  "sandals",
  "sneakers",
	"boots"
];
$quantities = [
  4,
  7,
	3
];
$i = 0;
while ($i<count($types)):
?>
<p>We sell <?=$quantities[$i]?> brands of <?=$types[$i]?></p>
<?php
$i++;
endwhile;
?>

























